#!/usr/bin/env python3

import re
import nmap3
import sys
import os
import openai


#APIkey = input('Enter OpenAI api key: ')
openai.api_key = os.getenv("OPENAI_API_KEY")


def ip_add():
    '''Checks that you entered a correct IP address or converts a URL into an IP address to be used by NMAP'''
    #regular expression patter to find correctly formatted IP address
    ip_pattern = '([0-9]{1,3}\.){3}[0-9]{1,3}'
    url_pattern = '([a-zA-Z0-9]+)(\.[a-zA-Z]{2,5})'
    #ensure an IP address was added properly
    ip = input('Enter Target IP or URL Address: ').strip()
    if re.match(url_pattern, ip):
        try:
            ip = socket.gethostbyname(ip)
            nmap_scan(ip)
        except socket.gaierror:
            print('Error: Not a valid target.')
            ip_add()
        except:
            clean_exit()
    elif re.match(ip_pattern, ip):
        nmap_scan(ip)
    elif not re.match(ip_pattern, ip) or not re.match(url_pattern, ip):
        print('Error: Not a valid target.')
        ip_add()


def nmap_scan(ip):
    '''NMAP service scan that identifies all running services and versions.'''
    nmap = nmap3.Nmap()
    results = nmap.nmap_version_detection(ip, args='--host-timeout 20')
    data = {}
    try:
        #data = all results generated from the scan
        data = results[ip]['ports']
    except:
        print('Error: Not a valid IP address')
        ip_add()
    global services
    services = []
    #iterate through all of the data collected on services running
    for i in data:
        if i['state'] == 'closed':
            continue
        #only grab version number, not excess information
        if 'version' not in i['service']:
            continue
        if ' ' in i['service']['version']:
            vNum = i['service']['version'].find(' ')
        else:
            vNum = len(i['service']['version'])
        if 'product' not in i['service']:
            continue
        if i['service']['product'] != 'Samba smbd':
            services.append([i['service']['product'], i['service']['version'][:vNum]])
        elif i['service']['product'] == 'Samba smbd':
            pass
    print('\n')
    if services != []:
        print(f'Services found: {services}')
        
    else:
        print('No open services detected.')
        clean_exit()

def get_completion(service):
    completion = openai.chat.completions.create(
        model='gpt-3.5-turbo',
        messages=[
            {
                "role": "user",
                "content": "List the most relevant information on exploitdb for " + service + "list in format of title, date, description and link.  I don't care if it is out of date.",
            },
        ],
    )   
    print(completion.choices[0].message.content)


def clean_exit():
    '''Just a clean way to exit the script.'''
    sys.exit(0)


def main():
        ip_add()
        service = ''
        for each in services:
            for e in each:
                service += e + ', '
        get_completion(service)


if __name__ == '__main__':
    main()